typhoid <- read_csv(here("data/typhoid_uganda.csv"))
typhoid <- read_csv(here("data/typhoid_uganda.csv"))
# Chunk 1
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, knitr, here)
## functions
source(here::here("global/functions/misc_functions.R"))
## default render
registerS3method("reactable_5_rows", "data.frame", reactable_5_rows)
knitr::opts_chunk$set(class.source = "tgc-code-block")
# Chunk 2
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse,
janitor,
inspectdf,
skimr)
# Chunk 3
non_adherence <- read_csv(here("data/non_adherence_messy.csv"))
non_adherence
# Chunk 4
# Chunk 5
non_adherence %>%
clean_names() %>%
names()
# Chunk 6
______________________ <-
typhoid <- read_csv(here("data/typhoid_uganda.csv"))
non_adherence_recoded %>%
skim()
if(!require(pacman)) install.packages("pacman")
# Packages
Load the following packages for this lesson:
# Load packages
if(!require(pacman)) install.packages("pacman")
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse,
janitor,
inspectdf,
skimr)
non_adherence <- read_csv(here("data/non_adherence_messy.csv"))
non_adherence
non_adherence <- read_csv(here("data/non_adherence_messy.csv"))
non_adherence
names(non_adherence)
non_adherence %>%
clean_names()
non_adherence %>%
clean_names() %>%
names()
non_adherence_cleaned <-
non_adherence %>%
clean_names()
non_adherence %>%
rename_with(.cols = everything(), .fns = toupper)
# We can also omit the .cols argument, which defaults to everything()
non_adherence_clean %>%
rename_with(.fns = toupper)
______________ %>%
# We can also omit the .cols argument, which defaults to everything()
non_adherence_clean %>%
rename_with(.fn = toupper)
non_adherence %>%
rename_with(.cols = everything(), .fn = toupper)
test_string <- "this is a test string" # replace test with new
str_replace_all(string = test_string, pattern = "test", replacement = "new")
test_string <- "this is a test test string" # replace test with new
str_replace_all(string = test_string, pattern = "test", replacement = "new")
str_replace(string = test_string, pattern = "test", replacement = "new")
non_adherence_clean <-
non_adherence %>%
clean_names()
non_adherence_clean %>%
rename_with(.cols = c(occupation_of_patient, education_of_patient),
.fn = ~ str_replace_all(.x, "_of_patient", ""))
non_adherence_clean_2 <-
non_adherence_clean %>%
rename_with(.cols = c(occupation_of_patient, education_of_patient),
.fn = ~ str_replace_all(.x, "_of_patient", ""))
typhoid %>%
clean_names() %>%
rename_with(str_replace_all, pattern = "or_",replacement = "_") %>%
rename_with(str_replace_all, pattern = "or_",replacement = "_") %>%
rename_with(str_replace_all, pattern = "of",replacement = "_") %>%
names()
# Chunk 1
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, knitr, here)
## functions
source(here::here("global/functions/misc_functions.R"))
## default render
registerS3method("reactable_5_rows", "data.frame", reactable_5_rows)
knitr::opts_chunk$set(class.source = "tgc-code-block")
# Chunk 2
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse,
janitor,
inspectdf,
skimr)
# Chunk 3
non_adherence <- read_csv(here("data/non_adherence_messy.csv"))
# Chunk 4
non_adherence
# Chunk 5
names(non_adherence)
# Chunk 6
non_adherence %>%
clean_names() %>%
names()
# Chunk 7
non_adherence_clean <-
non_adherence %>%
clean_names()
non_adherence_clean
# Chunk 9
non_adherence_clean %>%
rename_with(.cols = everything(), .fn = toupper)
# We can also omit the .cols argument, which defaults to everything()
non_adherence_clean %>%
rename_with(.fn = toupper)
# Chunk 10
test_string <- "this is a test string"
str_replace_all(string = test_string, pattern = "test", replacement = "new")
# Chunk 11
non_adherence_clean_2 <-
non_adherence_clean %>%
# manually re-name columns
rename_with(str_replace_all, pattern = "_of_patient", replacement = "")
non_adherence_clean_2
# Chunk 13
inspectdf::inspect_na(non_adherence_clean_2)
# Chunk 14
# Before removal
ncol(non_adherence_clean_2)
# Removing empty columns
non_adherence_clean_3 <- non_adherence_clean_2 %>%
remove_empty("cols")
# After removal
ncol(non_adherence_clean_3)
# Chunk 15
non_adherence_clean_3 %>%
mutate(missing_count = rowSums(is.na(.))) %>%
select(missing_count)
# Chunk 16
non_adherence_clean_3 %>%
mutate(missing_count = rowSums(is.na(.))) %>%
filter(missing_count == 14)
# Chunk 17
# Before removal
nrow(non_adherence_clean_3)
# Removing empty rows
non_adherence_clean_4 <- non_adherence_clean_3 %>%
remove_empty("rows")
# After removal
nrow(non_adherence_clean_4)
# Chunk 18
non_adherence_clean_4 %>%
get_dupes()
# Chunk 19
# Before removal
nrow(non_adherence_clean_4)
# Removing duplicates
non_adherence_distinct <- non_adherence_clean_4 %>%
distinct()
# After removal
nrow(non_adherence_distinct)
# Chunk 20
non_adherence_distinct %>%
get_dupes()
# Chunk 21
non_adherence_distinct %>%
count(occupation, name = "Count") %>%
arrange(-str_detect(occupation, "rofessor")) # to show the professor rows first
# Chunk 22
non_adherence_case_corrected <-
non_adherence_distinct %>%
mutate(across(.cols = c(sex, age_35, education, occupation, civil_status),
.fns = ~ str_to_title(.x))) #
# Chunk 23
non_adherence_case_corrected %>%
count(occupation, name = "Count")
# Chunk 24
non_adherence_distinct %>%
mutate(across(.cols = c(sex, age_35),
.fns = toupper))
# Chunk 25
non_adherence_distinct %>%
summarise(across(.cols = c(bmi_initiation_art, nr_of_pills_day),
.fns = ~ mean(.x, na.rm = TRUE)))
# Chunk 26
test_vector <- c("+", "-", "NA", "missing")
case_match(test_vector,
"+" ~ "Positive",
"-" ~ "Negative",
.default = "Other")
# Chunk 27
non_adherence_case_corrected %>% count(sex, name = "Count")
# Chunk 28
non_adherence_case_corrected %>%
mutate(sex = case_match(sex, "F" ~ "Female", .default = sex)) %>%
count(sex, name = "Count")
# Chunk 29
non_adherence_recoded <-
non_adherence_case_corrected %>%
mutate(sex = case_match(sex, "F" ~ "Female", .default = sex)) %>%
mutate(occupation = case_match(occupation,
"Worker" ~ "Laborer",
"Housewife" ~ "Homemaker",
"Truck Driver" ~ "Driver",
"Taxi Driver" ~ "Driver",
.default = occupation))
# Chunk 30
skim(non_adherence_recoded) %>%
select(skim_type) %>%
count(skim_type)
# Chunk 31
non_adh_distinct %>%
mutate(across(
.cols = !c(
age_at_art_initiation,
bmi_initiation_art,
cd4_initiation_art,
nr_of_pills_day
),
.fns = as.factor
)) %>%
skim() %>%
select(skim_type) %>%
count(skim_type)
typhoid
# Load packages
# Line 1
# line 2
# line 3
# line 4
# line 5
# Line 1
# line 2
# line 3
# line 4
# line 5
# Line 1
# line 2
# line 3
# line 4
# line 5
# Line 1
# line 2
# line 3
# line 4
# line 5
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, knitr, here)
## functions
source(here::here("global/functions/misc_functions.R"))
## default render
registerS3method("reactable_5_rows", "data.frame", reactable_5_rows)
knitr::opts_chunk$set(class.source = "tgc-code-block")
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse,
janitor,
inspectdf,
skimr)
non_adherence <- read_csv(here("data/non_adherence_messy.csv"))
non_adherence
names(non_adherence)
non_adherence %>%
clean_names() %>%
names()
non_adherence_clean <-
non_adherence %>%
clean_names()
non_adherence %>%
rename_with(.cols = everything(), .fn = toupper)
test_string <- "this is a test test string" # replace test with new
str_replace_all(string = test_string, pattern = "test", replacement = "new")
non_adherence_clean_2 <-
non_adherence_clean %>%
rename_with(.cols = c(occupation_of_patient, education_of_patient),
.fn = ~ str_replace_all(.x, "_of_patient", ""))
inspect_na
#
```
iris
inspect_na(non_adherence_clean_2)
inspect_na(non_adherence_clean_2)
# Removing empty columns
non_adherence_clean_3 <-
non_adherence_clean_2 %>%
remove_empty(which = "cols")
ncol(non_adherence_clean_2)
ncol(non_adherence_clean_3)
names(non_adherence_clean_3)
non_adherence_clean_3 %>%
mutate(missing_count = rowSums(is.na(.))) %>%
select(missing_count)
non_adherence_clean_3 %>%
mutate(missing_count = rowSums(is.na(.))) %>%
filter(missing_count == 14)
non_adherence_clean_3 %>%
mutate(missing_count = rowSums(is.na(.))) %>%
filter(missing_count == 14)
# Removing empty rows
non_adherence_clean_4 <-
non_adherence_clean_3 %>%
remove_empty(which = "rows")
# Before removal
nrow(non_adherence_clean_3)
# After removal
nrow(non_adherence_clean_4)
get_dupes(non_adherence_clean_4)
# Removing duplicates
non_adherence_distinct <-
non_adherence_clean_4 %>%
distinct()
# Before removal
nrow(non_adherence_clean_4)
# After removal
nrow(non_adherence_distinct)
non_adherence_distinct %>%
get_dupes()
non_adherence_case_corrected <-
non_adherence_distinct %>% # across function
mutate(across(.cols = c(sex, age_35, education, occupation, civil_status),
.fns = str_to_title))
non_adherence_case_corrected <-
non_adherence_distinct %>% # across function
mutate(across(.cols = c(sex, age_35, education, occupation, civil_status),
.fns = str_to_title))
non_adherence_distinct %>%
count(occupation) %>%
arrange(-(str_detect(occupation, "rofessor")))
non_adherence_case_corrected %>%
count(occupation) %>%
arrange(-(str_detect(occupation, "rofessor")))
non_adherence_distinct %>%
count(sex)
non_adherence_distinct %>%
count(age_35)
non_adherence_case_corrected %>%
count(age_35)
non_adherence_distinct
non_adherence_distinct %>%  ## use mutate across
mutate(across(.cols = c(sex, age_35),
.fns = toupper))
non_adherence_distinct %>%  ## use mutate across
mutate(across(.cols = c(sex, age_35),
.fns = ~ toupper(.x)))
calculate the mean of the columns `bmi_initiation_art` and `nr_of_pills_day`. We can do this using `summarise()` and `across()`:
non_adherence_distinct %>% # use summarise across
summarise(across(.cols = c(bmi_initiation_art, nr_of_pills_day),
.fns = mean))
non_adherence_distinct %>% # use summarise across
summarise(across(.cols = c(bmi_initiation_art, nr_of_pills_day),
.fns = mean))
non_adherence_distinct %>% # use summarise across
summarise(across(.cols = c(bmi_initiation_art, nr_of_pills_day),
.fns = ~ mean(.x, na.rm = T) ))
test_vector <- c("+", "-", "NA", "missing")
test_vector
case_match(test_vector,
"+" ~ "positive",
"-" ~ "negative",
.default = "unknown")
non_adherence_distinct %>% count(sex)
non_adherence_distinct %>% count(sex)
non_adherence_distinct %>% count(sex) %>% .$sex
non_adherence_distinct %>%
mutate(sex = case_match(sex, "F" ~ "Female", .default = sex))
non_adherence_recoded <-
non_adherence_case_corrected %>%
mutate(sex = case_match(sex, "F" ~ "Female", .default = sex)) %>%
mutate(occupation = case_match(occupation,
"Worker" ~ "Laborer",
"Housewife" ~ "Homemaker",
"Truck Driver" ~ "Driver",
"Taxi Driver" ~ "Driver",
.default = occupation
))
non_adherence_recoded <-
non_adherence_case_corrected %>%
mutate(sex = case_match(sex, "F" ~ "Female", .default = sex)) %>%
mutate(occupation = case_match(occupation,
"Worker" ~ "Laborer",
"Housewife" ~ "Homemaker",
"Truck Driver" ~ "Driver",
"Taxi Driver" ~ "Driver",
.default = occupation
))
non_adherence_recoded <-
non_adherence_case_corrected %>%
mutate(sex = case_match(sex, "F" ~ "Female", .default = sex)) %>%
mutate(occupation = case_match(occupation,
"Worker" ~ "Laborer",
"Housewife" ~ "Homemaker",
"Truck Driver" ~ "Driver",
"Taxi Driver" ~ "Driver"
))
# case match Worker to Laborer, Housewife to Homemaker, Truck Driver and Taxi Driver to Driver
non_adherence_recoded %>%
select(occupation)
non_adherence_recoded %>%
skim()
skim(non_adherence_recoded) %>%
select(skim_type)
non_adherence_recoded %>%
skim() %>%
count(skim_type)
skim(non_adherence_recoded) %>%
select(skim_type)
non_adherence_recoded
non_adherence_recoded %>%
mutate(across(.cols = !c(age_at_art_initiation, bmi_initiation_art,
cd4_initiation_art, nr_of_pills_day),
.fns = as.factor))
non_adherence_recoded %>%
mutate(across(.cols = !c(age_at_art_initiation, bmi_initiation_art,
cd4_initiation_art, nr_of_pills_day),
.fns = as.factor))
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, knitr, here)
## functions
source(here::here("global/functions/misc_functions.R"))
## default render
registerS3method("reactable_5_rows", "data.frame", reactable_5_rows)
knitr::opts_chunk$set(class.source = "tgc-code-block")
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse,
janitor,
inspectdf,
skimr)
non_adherence <- read_csv(here("data/non_adherence_messy.csv"))
non_adherence
# check column names
non_adherence %>%
clean_names() %>%
names()
________________ <-
typhoid <- read_csv(here("data/typhoid_uganda.csv"))
typhoid
typhoid %>% clean_names()
typhoid %>% clean_names() %>% names()
typhoid %>% get_dupes()
typhoid %>% get_dupes() %>% distinct()
